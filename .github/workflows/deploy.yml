name: Deploy n8n to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

env:
  AWS_REGION: us-east-1 # Or your desired region
  ECR_REPOSITORY: n8n # Match your Terraform `project_name`-n8n-repo

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: development # Or a suitable environment name
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        #aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$(echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0 # Or desired version

    - name: Terraform Init
      run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" -backend-config="key=n8n/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE_NAME }}"
      working-directory: ./terraform
      env:
        TF_STATE_BUCKET_NAME: your-n8n-terraform-state # Replace
        TF_LOCK_TABLE_NAME: your-n8n-terraform-state # Replace

    - name: Terraform Plan
      run: terraform plan -var "container_image_tag=${{ github.sha }}" -var "db_password=${{ secrets.TF_VAR_DB_PASSWORD }}" -var "n8n_encryption_key=${{ secrets.TF_VAR_N8N_ENCRYPTION_KEY }}" -var "acm_certificate_arn=${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}"
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -var "container_image_tag=${{ github.sha }}" -var "db_password=${{ secrets.TF_VAR_DB_PASSWORD }}" -var "n8n_encryption_key=${{ secrets.TF_VAR_N8N_ENCRYPTION_KEY }}" -var "acm_certificate_arn=${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN }}"
      working-directory: ./terraform

    - name: Get ALB DNS Name
      id: get_alb_dns
      run: |
        ALB_DNS=$(terraform output -raw n8n_alb_dns_name)
        echo "ALB_DNS=$ALB_DNS" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Output n8n URL
      run: |
        echo "n8n is deployed and accessible at: https://${{ steps.get_alb_dns.outputs.ALB_DNS }}"